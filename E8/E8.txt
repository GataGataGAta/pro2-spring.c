---------------------------------------------------------
[E8] 第7章 文字列 に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E8
学生番号： 
氏名： 
作成日： 


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(E8_1)

学習内容：
 キーボードから入力された文字列の長さを表示するプログラムを作成する．

[リスト 7.7] を入力・実行せよ．ただし，文字数を表示する文（ main 関数内 return 文の直前）は以下に変更すること．
printf( "入力文字列: %s, 文字数: %d \n", message, len  );

表示結果の文字列と文字数を比較し，考察せよ（下記参照）．
レポートでは関数 str_length でどのように文字数が数えられているかを説明せよ．
以下は補足：
fgets() 関数を用いる際に，キーボードから改行を行うと，改行（\n）も一文字として文字配列 message に格納され，その直後にNULL 文字（\0）が代入される．教科書 p.274 の fgets に関する記述は正しくないため，注意すること．
教科書の[リスト 7.6][リスト7.7]の周辺は適切でない記述が多くみられるため，課題ページの正誤表に目を通しておくこと．

結果：
入力文字列: hello
, 文字数: 6 

習得した内容・反省・考察など：
Str_lengtha関数内にて、終端文字までカウントしているため、改行も一文字としてカウントされていると考えられる。また、str[i] != '\0'の部分をstr[i] != '\n'に変更したところ、しっかりと入力した文字数になっていた。

-----------------------------------------------
(E8_2) 

学習内容：
 キーボードから入力された文字列の長さを表示するプログラムを作成する．

[リスト 7.7] を入力せよ（前問で作成したプログラムを流用してよい）．printf 文で message と len を表示すること．
以下に示す関数 void get_line( char buff[], int size ) を追加せよ．
main 関数にて， fgets の行を削除し， get_line(message, 256 ); に置き換えよ．
このプログラムを実行し，キーボードへ入力した文字数と，実行結果との数字を比較せよ．前問での結果との一致/相違について考察してレポートに記せ．
レポートでは関数 get_line で行われている処理を詳しく説明せよ．
void get_line(char buff[], int size)
{
    int i, c;

    for (i = 0; i < size - 1; i++)
    {
        c = getchar();
        if (c == EOF || c == '\n') break;
        buff[i] = c;
    }
    buff[i] = '\0';
}

※ main 関数から， get_line( str, 256 ); として関数 get_line を呼び出せばよい．get_line では引数として受け取った配列 buff[] に文字列が代入されている．このとき，その内容は main 関数内の配列 str にも反映される（詳しくは教科書8章「ポインタ」参照，第9回授業で扱う）ため，str に格納された文字列の長さを求めればよい．
(E8_3) 標準関数 size_t strlen() を用いて，キーボードから入力された文字列の長さを表示するプログラムを作成する．

結果：
メッセージを入力してください >>> hello
入力文字列: hello, 文字数: 5 

習得した内容・反省・考察など：
ひとつ目の課題と比べて、今回の課題内では、しっかりと入力された文字数をカウントしている。get_line関数内にて、forループを作成し、その中で整数cにgetchar関数を利用して、入力された文字を代入している。その後、cに代入された値をbuff[i]に代入した後、ループを繰り返している。また、メッセージが終わりになるか、開業された場合はループを抜け、その時のiの数値に対応するbuff[i]に終端文字を代入している。

-----------------------------------------------
(E8_3) 

学習内容：
標準関数 size_t strlen() を用いて，キーボードから入力された文字列の長さを表示するプログラムを作成する．

[リスト 7.6]を入力せよ．
前問で示した関数 void get_line( char buff[], int size ) を追加せよ．
main 関数にて， fgets の行を削除し， get_line(message, 256 ); に置き換えよ．
下に示すように，標準関数 strlen の戻り値を len に代入する際に int 型にキャストせよ． 
標準関数 strlen() の戻り値は size_t 型であるため，unsigned int 型変数に代入する上でキャストしている(変数 len が unsigned int 型のため)．この後の課題で strlen() を使用する際には注意すること（教科書の [リスト 7.6] ではこのようになっていません）．
このプログラムを実行し，前問との表示の一致/不一致について確認せよ．

    len = (unsigned int)strlen( message );  // （注）標準関数 strlen は size_t 型のため，unsigned int 型にキャストする

結果：
メッセージを入力してください >>> hello
メッセージの長さは 5 文字です。

習得した内容・反省・考察など：
ひとつ前の課題と同じ出力を得ることができた。

-----------------------------------------------
(E8_4) 

学習内容：
キーボードから入力された2個の単語を辞書順に表示するプログラムを作成せよ．なお，キーボードからは小文字のみからなる異なる単語が入力されることを仮定してよい．

[リスト 7.9] を入力せよ．ただし，関数 str_cmp は以下に示す int str_compare( char s1[], char s2[] ) に置き換えること （ str_cmp はプログラムに含めない ）．
// 副読本「キックオフ C言語」， p. 154 より抜粋

int str_compare( char s1[], char s2[] ){

	for( int i=0; s1[i] != '\0' || s2[i] != '\0'; i++ ){
		int diff = (unsigned char)s1[i] - (unsigned char)s2[i];
		if( diff != 0 )
			return diff;
	}
	return 0;
}

このプログラムを実行し，動作を確認せよ． また，str_compare の戻り値を printf 文で表示することで，どのような場合に正，負，0の値をとるか理屈とともに確認せよ．
キーボードから入力された2個の文字列を 関数 str_compare( ) の戻り値に基づいて辞書順に表示するようにプログラムを変更せよ．ただし，2個の文字列が一致する場合は，その文字列を1回のみ表示せよ．
レポートでは関数 str_compare でどのように比較が行われているか詳しく説明せよ．
表示例： 
hanshin と hankyu のとき： hankyu, hanshin 
japan と japanese のとき： japan, japanese 
network と network のとき： network

結果：
文字列１を入力してください >>> hanshin
文字列２を入力してください >>> tigers
tigers, hanshin

習得した内容・反省・考察など：
Str_compareの戻り値が負になる時は、入力された文字の一つ目の文字が二つ目の文字より辞書的に前にある時である。これは辞書的に後ろの文字の方がASCIIコードが小さくなるからである。また、同様に戻り値が正となる時は、一つ目の文字が二つ目の文字よりも辞書的に後ろにあるからである。

-----------------------------------------------
(E8_5) 

学習内容：
[リスト 7.8] を参考にして，キーボードから入力された2個の文字列を標準関数 strcmp( ) の戻り値に基づいて辞書順に表示するプログラムを作成せよ．ただし，2個の文字列が一致する場合は，その文字列を1回のみ表示せよ

結果：
文字列１を入力してください >>> hanshin
文字列２を入力してください >>> hankyu
hankyu, hanshin

習得した内容・反省・考察など：
ひとつ前の課題の内容を参考とすることで、同様の条件を満たす課題を作成することができた。コードを書いている途中、strcmpの戻り値の条件がわからなくなり、混乱してしまった。これからは別の神など身メモを取りながら進めていきたい。

-----------------------------------------------
(E8_6) 

学習内容：
自作の関数 str_cpy と標準関数 strcpy を用いて，配列に格納された文字列を別の配列にコピーするプログラムを作成する．

[リスト7.11] を入力し，コンパイル・実行せよ． 
関数にてどのような処理により文字列がコピーされているか，レポートにて詳しく説明せよ 
（なお，int str_cpy(...) は void str_cpy(...) とし，return 0; を return; とするほうがよい．詳しくは課題ページからリンクされた教科書正誤表を参照）． 

続いて，文字配列 char str3[] を定義して，適当な文字列，例えば "lion" で初期化する．
この時点での str2 と str3 を printf 文で表示せよ（[リスト 7.10]に倣い，「コピー前」と書くとよい）．
[リスト 7.10] を参考にして，標準関数 strcpy( ) を用いて str2 を str3 にコピーせよ．
コピー後の str2 と str3 を表示するようプログラムに書き加えよ．

結果：
コピー前：str2 = cat, str3 = wolf
コピー後：str2 = cat, str3 = cat

習得した内容・反省・考察など：
strcpy関数を用いて、str2の内容をstr3にコピーすることができた。この関数の中では、配列を二つ受け取り、ひとつ目の配列の中身を二つ目の配列にwhile文を使ってコピーしている。しかし、ひとつ目の配列に開業が現れた瞬間、コピーを中止し、ループを抜けるようにしている。

-----------------------------------------------
(E8_7) 

学習内容：
 自作の関数 str_cat, str_cpy と標準関数 strcat, strcpy を用いて，2個の文字列を連結して別の配列に格納するプログラムを作成する．

[リスト7.13] を入力し，コンパイル・実行することで，文字列 word1 と word2 の連結が sign に格納されることを確認せよ． 
関数にてどのような処理により文字列がコピー・連結されているか，レポートにて詳しく説明せよ． 

次に，文字配列 char sign2[16] を定義する．
[リスト 7.12] を参考にして，標準関数 strcpy( ) と strcat( ) を用いて word2 と word1 をこの順番で連結した文字列を sign2 に格納して表示する機能を追加せよ．strcat( ) については[リスト 7.12]が参考になる．

結果：
hallenge = flash.
password = thunder.
countersign = YS
--> countersign = flash.thunder.
--> countersign2 = thunder.flash.

習得した内容・反省・考察など：
コピーをする関数は、ひとつ前の課題と同じであったため、説明を省略する。連結をする関数str_catは、ひとつ目のwhile文において、改行までの文字数をiに代入し、二つ目のwhile文において、文字数＋1からの要素にもう一つの文字配列をコピーしている。

-----------------------------------------------
(E8_8) 

学習内容：
文字列が与えられたとき，その長さと，その中に含まれる大文字，小文字，数字，その他(の記号やスペースなど)，それぞれの個数を求めたい．

十分な数の要素数を持つ char 型の配列 str を定義する．
以前の課題で使用した関数 void get_line(char buff[], int size) を用いてキーボードから文字列 str を受け取る．
大文字，小文字，数字，その他の個数を格納する変数をそれぞれ定義し，0 を代入する．
str[ i ] が NULL 文字でない間，i を増やしながら以下を繰り返す．
str[ i ] が，いずれの種類(大文字，小文字，数字，その他)に該当するかを判定し，その個数を格納する変数をインクリメントする．
（str[ i ] が 65以上90以下なら大文字，97以上122以下なら小文字，48以上57以下なら数字である）
str の長さを標準関数 strlen() を用いて得る
各種類の個数の和が str の長さと等しいことをプログラム内で確認せよ．両者が等しいことを条件として， str の長さ，大文字の個数，小文字の個数，数字の個数，その他の個数 を表示せよ．
表示例： 
Japanese team as No. 1 → 長さ 22，大文字 2，小文字 14，数字 1, その他 5 
May 30 (Tue), 2023 → 長さ 18，大文字 2，小文字 4，数字 6, その他 6 
for( i=0; str[i] != '\0'; i++ ) → 長さ 31，大文字 0，小文字 9，数字 2, その他 20

結果：
字列１を入力してください >>> Hello B1 Nagasaki Velca
文字数=23
入力された文字列=Hello B1 Nagasaki Velca
大文字=4, 小文字=15, 数字=1, その他=3

習得した内容・反省・考察など：
文字列の各々の要素を抽出することができた。while分の無限ループの中にif文を入れることで課題の内容に合致するコードを書くことができた。

-----------------------------------------------
(E8_9) 

学習内容：
引数として受け取った文字列 src[] を逆順にコピーして dst[] に代入する関数 void str_reverse_copy( char dst[ ], char src[ ] ) を作成せよ． また，これを用いて，キーボードより受け取った文字列を逆順に表示するプログラムを作成せよ． 例えば, "a Santa at Nasa" → "asaN ta atnaS a" となることを確認せよ（この例は回文です）．
関数 str_reverse_copy で行う処理の例を以下に挙げる：

標準関数 strlen() を用いて str[] の長さを調べる → NULL 文字の位置が求まる （ strlen() の戻り値が，配列 str の NULL 文字の位置となる理由を確認せよ）
dst[] 内の（str[] の NULL 文字と）同じ位置に NULL 文字を代入する．
str[] 内の先頭の文字から一文字ずつ dst[] に代入する．ただし， dst[] には NULL 文字の直前から前方へ遡って文字を代入する必要がある．
(表示例)
Key in a string>> a Santa at Nasa
asaN ta atnaS a
※ get_line 関数に対して説明した通り，関数 str_reverse_copy で処理された文字配列の結果は，main 関数で渡された配列に反映される（詳しくは第9回授業，教科書8章参照）

結果：
文字列を入力してください：niwanihaniwaniwatorigairu
niwanihaniwaniwatorigairu
を逆にすると
uriagirotawinawinahinawin

習得した内容・反省・考察など：
文字列の長さを取得し、その長さをもとにforループを作成することで、入力された文字列を逆にする関数を作成した。src[length - i - 1]と置くことで、dstの配列に代入する際に、配列の数が合わなくなるという現象を回避することができた。

-----------------------------------------------
(E8_10*) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
[E8] 全体に対する感想などを以下に記すこと．
所要時間： （3）時間
今回の課題では、文字列について勉強することができた。ヌル文字など、今までは取り扱ってこなかったものが登場したため、しっかりと内容wp理解してから進んでいきたい。char型をまだ使いこなすことができていないため、int型などの他の型と絡めたエラーをよく出してしまうため、関数に代入するときなどに、必ずこの変数がなんの型であるのか、キャストが必要なのかなど確認してからコードを書いていきたい。


