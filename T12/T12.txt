---------------------------------------------------------
[T12] 第10章 ファイルと乱数 に関する考察・感想用テンプレート
---------------------------------------------------------

課題： T12
学生番号： 
氏名： 
作成日： 


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(T12_1)

学習内容：
ファイルからデータを読み込んで計算を行うプログラムを作成する．

テキストエディタに下に示す数値をコピーし，ファイル名を indata.txt としてこれから作成するプログラムと同一ディレクトリ（フォルダ）に保存せよ． 
ただし，最後の 0 はターミネータ，すなわちデータの末尾を示す目印とする．
[リスト 10.2] を入力・実行せよ．
indata.txt 内の数値について，平均値・最大値・最小値を求めて出力するプログラムを作成せよ． 
平均値 52.9，最大値 98，最小値 11 となることを確かめよ．
79
45
21
98
93
41
68
41
11
32
0

結果：
合計=529 平均値=52.9 最大値:98 最小値:11

習得した内容・反省・考察など：
同一ディレクトリに存在しているファイルの内容を参考に最大値、最小値を計算することができた。

-----------------------------------------------
(T12_2) 

学習内容：
教科書 p. 354～356，および副読本「キックオフ C言語」の p. 196（電子版は課題ページのリンク参照）に必ず目を通した上で，コマンドラインから引数を与える方法を以下に従って理解せよ（この後の問題のため，ファイル名を表す文字列を受け取ることを想定する）．

以下のコードを入力せよ．
argc を書式 %d で，argv[0] と argv[1] を書式 %s で表示する printf 文を追加せよ．
このプログラムをコンパイルし，実行の際に適当な文字列 1個をコマンドライン引数として与え，実行結果を確認せよ（Cygwin なら例えば，"./a.exe indata.txt"．VS Code はこちらを参照）．
下記のコードの if 文は，与えられた文字列が 1 個以外である場合に使用法を表示した上で終了させるものである．コマンドライン引数の入力誤りは起こりやすいため，コマンドライン引数を使用する際にはこのようなエラー処理を加えることは必須と考えよ．
実行の際にコマンドライン引数を与えない場合，および2個以上の文字列をコマンドライン引数として与える場合をそれぞれ試し，動作を確認せよ．
#include <stdio.h>
#include <stdlib.h>

int main( int argc, char *argv[] )
{
    if( argc != 2 ){
        printf("使い方: %s filename \n", argv[0]);
        exit(EXIT_FAILURE);
    }

    return 0;
}
（参考）
"char *argv[]" は「ポインタの配列」であり，従ってこの配列の各要素はアドレスである．このアドレスは，コマンドライン引数として受け取る各文字列が格納された領域の先頭アドレスを指す．「ポインタの配列」についてはプログラミング実習IIIにて詳しく学ぶ．
コマンドライン引数として整数を与えることも可能であるが，これは文字列として格納されてしまう．従って，int 型の変数に代入するには，例えば stdlib.h をインクルードした上で関数 atoi() で変換する必要がある．

結果：
正常な場合:2 ./a.out indata.txt

コマンドライン引数なし:　使い方: ./a.out filenam

コマンドライン引数2つ: 使い方: ./a.out filename 

習得した内容・反省・考察など：
コマンドライン引数というものについて勉強することができた。実行する際に一回ファイル名を入力すれば、後は履歴を利用することができるのは非常に有用だと思うので、積極的に活用していきたい。

-----------------------------------------------
(T12_3) 

学習内容：
 [リスト 10.3] を参考にして，入力するファイルを実行時に指定できるように課題 (T12_1) のプログラムを書き換えよ.

前問で扱ったエラー処理を含めること．
指定されたファイルが存在しなかった場合にはその旨を表示して終了するようにせよ.

結果：
正常な場合: 合計=529 平均値=52.9 最大値:98 最小値:11

エラー時: ファイルが見つかりません。 ./a.out filename のようにファイル名を指定してください。

習得した内容・反省・考察など：
ファイル名を実行時に指定させて、ないようをもとに最大値と最小値を出力することができた。strcpy関数を使って記述することで、うまく表現することができた。

-----------------------------------------------
(T12_4) 

学習内容：
[リスト 10.4]を参考にして，データの終わりを 0 で示さなくても終了を判定できるように前問のプログラムを書き換えよ. indata.txt は上の問題で用いたものと同一する．プログラムを実行し (今度は末尾の 0 がデータとして認識される), 平均値 48.09，最大値 98，最小値 0 となることを確かめよ．

結果：
合計=529 平均値=48.0909 最大値:98 最小値:0

習得した内容・反省・考察など：
for文ではなく、while文を使うことで、データの最後に0を入れなくともデータの終端を認識することができた。また、この書き方ではindataの中に0が残っていると、0の後にデータの終端が来てしまうので、平均値が変わると考えられる。

-----------------------------------------------
(T12_5) 

学習内容：
乱数とはランダムに（不規則的に）発生する数を指す． 真の意味での乱数を得る手法として，ある物理的現象を観察するものが知られている． 一方，コンピュータでプログラムに従って行われる計算はあくまで 確定的であるため，真の意味での乱数を生成することは困難である． このため，コンピュータでランダムな数を必要とする場合は，確定的 な計算により乱数のように見える擬似乱数と呼ばれるものを生成する．擬似乱数はシミュレーションを行う場合などに有用である．
下記の＜解説＞を読み，(練習1)から(練習3)の説明にしたがってプログラムすることで乱数について理解したのち，[設問]に解答せよ．プログラムは，[設問]で作成したものを提出せよ．

[乱数についての理解のための練習]
(練習1) (program1)のプログラムは0 以上 RAND_MAX 以下の乱数を10個生成するプログラムである．このプログラムを何回か実行し，それらの結果を比較せよ．
(練習2) rand を使い，サイコロを10回振って出た目を表示するプログラムを作成せよ．
また，作成したプログラムを 2 度実行しこれらの結果を比較せよ．
(練習3) (program2)のプログラムは乱数を10個生成するプログラムである．このプログラムを何回か実行し，結果を(練習1)の結果と比較せよ．

[設問]
srand を使い，サイコロを10回振ってランダムに出た目を表示するプログラムを作成せよ．
また，作成したプログラムを何度か実行し考察せよ．(ただし，考察はこの設問だけでなく練習１から３についても記すこと．)

--＜解説＞----------------------------------------------------------------

C言語には、疑似乱数を作るrand関数が用意されている．
なお、rand関数を使うには <stdlib.h> を #include する必要がある．

変数 = rand();

rand関数には、特にパラメータなどを渡す必要はなく、そのまま使うだけでランダムな値を計算する．

（練習1）次のプログラムを実行して、乱数を10回計算せよ．何回か繰り返し実行せよ．

(program1)

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
        int i;

        for (i = 0;i < 10;i++) {
                printf("%d\n",rand()); 
        }

        return 0;
}
乱数の範囲を限定するには
[手順１] ０から任意の値までの乱数を求める
rand関数から返ってくる値を，任意の値＋１で割った余りを求めると，０から任意の値までの整数になる． 

rnd = rand() % (6 + 1);

※７で割った場合の余りは０，１，２，３，４，５，６のいずれかになる． 
[手順２] 任意の範囲内で乱数を求める
例えば下限が１，上限が６の範囲で乱数を発生させるには，０から５（上限－下限）の乱数に１（下限）を加算すればよい． 

rnd = 1 + rand() % (6 - 1 + 1);

※０から５の範囲で発生させた乱数に１を足すことにより，１から６の範囲になる ．

乱数の値 ＝ 下限の値 ＋ rand() % (上限の値 － 下限の値 ＋ １)；

（練習2）サイコロを10回振って出た目を表示するプログラムを作成し，2度試行して考察せよ．

毎回異なる乱数にする

（練習１）の使用例のプログラムは，実は何回実行しても同じ値の乱数が発生してしまう．これは、rand関数を呼び出す際、乱数列の開始点を指定していないため，一番最初から表示してしまうためである．
乱数列の開始点を指定するには、「srand関数」を利用する。

srand(元の数);

ただし、srand関数を使って別の数値を入れたとしても、実行される時に元の数が同じであれば同じ乱数になる．
これを解決する方法に，現在時刻を入れる方法がある．
秒単位の現在時刻をsrand関数に入れれば、毎回異なる元の数を乱数に使える。

現在時刻を得る関数はtime関数で <time.h> を #include する必要がある．
srand関数とtime関数を次のように使えば，毎回異なる乱数を計算できる．

srand((unsigned int)time(NULL));

unsigned int という型にキャストしているが，これは符号なしの整数値である．
この処理はプログラムを開始するときに1回行えだけでよい．

（練習3）次の乱数を10回計算するプログラムを何回か繰り返し実行し，（練習１）のプログラムと比較せよ．

(program2)

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main(void)
{
        srand((unsigned int)time(NULL));
        int i;

        for (i = 0;i < 10;i++) {
                printf("%d\n",rand()); 
        }

        return 0;
}

結果：
 1回目:  3
 2回目:  1
 3回目:  1
 4回目:  3
 5回目:  2
 6回目:  1
 7回目:  2
 8回目:  2
 9回目:  4
10回目:  3

習得した内容・反省・考察など：
練習1では、ランダムな数字を10個出力しているため、実行すると10個の数字が出力される。しかし、このままの書き方では何回実行しても同じ数字の列が出力されてしまうという問題がある。練習2では、練習位置であった問題を改善している。練習3では、ランダムな値が10個出力されており、練習1よりもよりランダム性が増している。

-----------------------------------------------
[T12] 全体に対する感想などを以下に記すこと．
所要時間： （1）時間
今回の課題では、ファイルの読み書きについて勉強することができた。同一のディレクトリに保存してあるファイルを使って、中身の値を操作するものであったが、今までの実習でやったことがないような内容であったため、少し難しく感じた。特に、コマンドライン引数がについての理解が難しく、実行時にファイルを指定するという今までにやったことのないやり方であったので、授業が医科大も使ってさらに理解を深めておきたい。



