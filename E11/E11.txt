---------------------------------------------------------
[E11] 第9章 構造体とユーザ定義型 に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E11
学生番号： 37022503
氏名： 山形隼士
作成日： 6/25


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(E11_1)

学習内容：
[T11]で見たように，typedef により，ユーザは新たに型を定義できる．例えば，struct roll 型の構造体に対して，

typedef struct roll roll_t;
とすることで，roll_t 型が定義される．すなわち，それ以降では struct roll 型を「roll_t 型」という名前で簡素に書くことができることになる（逆に言うと，プログラミング実習IIの範囲では，typedef を用いる恩恵はその程度）．
次の手順に沿ってプログラムを作成せよ．

main( ) の外部に，次のメンバを持つ構造体 struct date を宣言せよ．
int y; … 年を表す整数
int m; … 月を表す整数
int d; … 日を表す整数
typedef を用いて struct date から「新しい型」 date_t を宣言せよ．
main( ) の内部に date_t 型の構造体変数 my_day を宣言せよ．再度，教科書 9.5.1 項をよく読み，ユーザ定義型の変数を宣言するにはどうすればよいか，自ら考えよ．
今日の日付など好きな日にあわせて，my_day の各メンバに値を代入せよ．
引数として受け取った date_t 型の構造体変数の内容を，「今日は，2023年 6月20日です．」という形式で表示するように，関数 void print_day2(date_t this_day) を完成せよ．

結果：
2023年, 6月25日です。

習得した内容・反省・考察など：
構造体にtypedefをつかって、別名をつけることができた。また、別名を使って構造体を定義し、構造体の中の要素を定義することができた。

-----------------------------------------------
(E11_2) 

学習内容：
次の手順に沿って，構造体を用いた複素数の演算を行うプログラムを作成せよ．

問題文中の補足説明を追加したため，変数名が変更された箇所があります（2023/6/20, 13:00）．それ以前に解いている場合は，修正は不要です．
次のようなメンバを持ち複素数を表す構造体 struct s_complex を宣言する．
double re; … 複素数の実数部
double im; … 複素数の虚数部
main 関数の外側で typedef 宣言を用いて，上記の構造体を complex_t 型として参照できるようにせよ（main 関数の中で typedef をすると，complex_t 型が他の関数から参照できない）．
main 関数にてキーボードから2つの複素数の情報を受け取り，complex_t 型の変数 x および y にセットせよ．．
複素数 x について，実数を2個受け取り，それらを x.re および x.im とすればよい．
複素数 y についても同様．
実数を受け取る際の scanf の書式は %lf である．
引数として complex_t 型の変数を 1 つ受け取り，その値を（i を虚数単位とする）
  3.14000 + 2.43000 i  
のように表示する関数 void complex_print( complex_t a ) を作成せよ．complex_t 型の変数 a のメンバである a.re と a.im は double 型であるため，これらを printf で表示すればよい.
complex_t 型の変数 x を引数として，関数 complex_print を呼び出し，正しく表示されることを確認せよ．y についても同様．
2個の複素数を引数として，それらの加算を行った結果を戻り値とする関数 complex_t complex_add( complex_t a, complex_t b ) を作成する． この関数は， complex_t 型の変数 2 つを引数として受け取り，complex_t 型を戻り値とすることに注意する． 以下に手順の一例を示す．
complex_t 型の変数 sum を定義する．
sum の実数部 sum.re と虚数部 sum.im を a.re, a.im, b.re, b.im から計算する．
sum を戻り値とする
2個の複素数を引数として，それらの乗算を行った結果を戻り値とする関数 complex_t complex_mul( complex_t a, complex_t b ) を作成する． この関数は， complex_t 型の変数 2 つを引数として受け取り，complex_t 型を戻り値とすることに注意する． 以下に手順の一例を示す．
complex_t 型の変数 prod を定義する．
prod の実数部 prod.re と虚数部 prod.im を a.re, a.im, b.re, b.im から計算する．
prod を戻り値とする
main 関数にて，x と y の加算と乗算の結果を表示するプログラムを，本問で扱った 3つの関数を用いて作成せよ． 

たとえば，x = 1.5 + 2.1 i と y = 0.3 - 2.5 i の加算と乗算の結果はそれぞれ
x + y = (1.5 + 0.3) + (2.1 + (-2.5)) i = 1.8 - 0.4 i
x y = (1.5*0.3 + 2.1*(-2.5)*(-1)) + (1.5*(-2.5)+2.1*0.3) i = 5.7 - 3.12 i
である．

結果：
複素数を入力して下さい。1.2222 2.1111
複素数を入力して下さい。3.2222 4.1111
一つ目の複素数:1.222200 + 2.111100i
二つ目の複素数:3.222200 + 4.111100i
足し算:4.444400 + 4.222200i
掛け算:3.938173 + 8.678943i

習得した内容・反省・考察など：
構造体を使った関数の使い方を勉強することができた。構造体の関数を使うときには、引数.要素(a.no)のように記述することで、うまく計算させることができた。

-----------------------------------------------
(E11_3) 

学習内容：
構造体のポインタに関する以下の問題に解答せよ． [リスト9.1] について，[T11] の冒頭に記した注意事項を反映した上で（以前に自分で作成したプログラムは流用してよい），以下の変更を加えよ．

struct roll 型の構造体変数 my_data; を定義する．
struct roll 型のポインタ struct roll *a; を定義する．
ポインタ a に，構造体変数 my_data のアドレスを代入する．
a が指し示す構造体変数のメンバにデータを代入する．ただし，メンバの参照の上で矢印演算子（9.4.2節参照）を用いること．
a が指し示す構造体変数のメンバを表示せよ．

結果：
NAME         BIRTHDAY   ZIP      ADDRESS                      TEL
Hinako       19090225   1234567  Yokohama-shi Kanagawa Pref.  045-123-4567

習得した内容・反省・考察など：
構造体のポインタについて勉強することができた。構造体のポインタを使用するときには、矢印演算子(->)を使うことを忘れないようにしておきたい。

-----------------------------------------------
(E11_4) 

学習内容：
 関数への変数や構造体の受け渡しに関するプログラムについて以下に解答せよ．(プログラム c を提出すること)

下記に示す(プログラムa)～(プログラムd)を読んで，実行したときのそれぞれの表示を予想し，考察欄に記せ．
コンパイル・実行し，結果を確認し，考察欄にて報告せよ．呼び出された関数 my_func( ) 中の代入は main( ) 中の変数 x，構造体変数 p および配列 array の値に影響を与えたか？各プログラムにおける関数の引数がどのようなものであり，それが結果にどのように影響したかを考察欄に記せ．
矢印演算子 -> については 9.4.2項を参照のこと． 
(プログラム a)
#include <stdio.h>

void my_func( int x )
{
  x += 5;
}

int main( void )
{
  int x;

  x = 3;
  
  my_func( x );

  printf(" x = %d \n", x );

  return 0;
}




(プログラム b)
#include <stdio.h>

struct point {
  int x;
  int y;
};

void my_func(struct point p)
{
  p.x += 5;
  p.y += 5;
}

int main(void)
{
  struct point p;

  p.x = 1;
  p.y = 2;
  
  my_func(p);

  printf("x = %d,  y = %d\n", p.x, p.y);

  return 0;
}



(プログラム c)
#include <stdio.h>


struct point {
  int x;
  int y;
};

void my_func(struct point *p)
{
  (*p).x += 5;
  p->y += 5;
}

int main(void)
{
  struct point p;

  p.x = 1;
  p.y = 2;

  my_func(&p);

  printf("x = %d,  y = %d\n", p.x, p.y);

  return 0;
}



(プログラム d)
#include <stdio.h>

struct point {
  int x;
  int y;
};

void my_func(struct point p[])
{
  int i;

  for( i = 0; i < 2; i++ )
  {
    p[i].x += 5;
    p[i].y += 5;
  }
}

int main(void)
{
  struct point p[2];

  p[0].x = 1;
  p[0].y = 2;

  p[1].x = 3;
  p[1].y = 4;

  my_func( p );

  printf("p[0].x = %d,   p[0].y = %d\n", p[0].x, p[0].y);
  printf("p[1].x = %d,   p[1].y = %d\n", p[1].x, p[1].y);

  return 0;
}

結果：


習得した内容・反省・考察など：

-----------------------------------------------
(E11_5) 

学習内容：
以下の通り，構造体の配列について計算を行うプログラムを作成せよ．

main( ) の外部に，次のメンバを持つstruct npb 型の構造体を宣言する．さらに typedef によりそれに npb_t という別名を付ける．
char name[ 15 ]; … 球団名
double wp; … 勝率 (winning percentage)
int win; … 勝利数
int lose; …敗戦数
int tie; …引き分け数
main( ) の外部で配列の大きさを定義する．「#define N 12」と記述せよ．
main( ) の内部に，npb_t 型の構造体の配列 team[ N ] を定義し，以下に示す（架空の）データで構造体の配列 team[ N ] を初期化せよ．
各球団の勝率（0.0以上1.0以下の実数で表す）を計算して，構造体のメンバ team[i].wp に代入せよ．ただし，勝率は，(勝利数)/(勝利数＋敗戦数) と定義する（引き分け数は分母に含まない）．
12球団の中での勝率が最大であるものを首位とする．首位の球団のデータ（球団名/勝率/勝利数/敗戦数/引き分け数）を表示せよ． 
最大値を求める過程で，最大値を与える配列の添字も同時に記録しておけばよい（本問では同率首位はないことを仮定してよい）．
 npb_t team[ N ] = {
    { "Bay Stars", 0.0,  9,  7, 2 },
    { "Buffaloes", 0.0,  8,  9, 1 },
    { "Carp", 0.0,  5, 12, 1 },
    { "Dragons", 0.0,  6, 12, 0 },
    { "Fighters", 0.0,  7, 11, 0 },
    { "Giants", 0.0,  7, 10, 1 },
    { "Golden Eagles", 0.0,  9,  9, 0 },
    { "Hawks", 0.0, 10,  7, 1 },
    { "Lions", 0.0,  9,  8, 1 },
    { "Marines", 0.0, 10,  8, 0 },
    { "Swallows", 0.0, 12,  5, 1 },
    { "Tigers", 0.0, 12,  6, 0 },
};

結果：
球団名: Swallows
勝率: 0.705882
勝利数: 12
敗戦数: 5
引き分け数: 1

習得した内容・反省・考察など：
与えられたデータを用いて、勝率を計算し、首位の球団を求めるプログラムを作成することができた。首位のデータを求めるときに、変数を利用するやり方を忘れてしまっていたため、しっかり復習しておきたい。

-----------------------------------------------
(E11_6) 

学習内容：
 教科書の 9.4.1 項(p. 333～)を読み，次の手順に沿って指定された授業の情報を表示するプログラムを作成せよ．

main( ) の外部に， 次の 5 つのメンバを持つ構造体 struct jugyo を宣言せよ．
char dow[4]; … 曜日（day of week）
int tp; … 時限（time period）
char subject[30]; … 授業名
int build; … 建物(号館)
int room; … 教室
main( ) の外部で，typedef を用いて struct jugyo に対して jugyo_t 型を定義せよ．
main( ) の内部にて jugyo_t 型の構造体の配列 class[13] を定義し，下に示す（架空の）データをセットする．
要素数が 4 である char 型の配列 str を関数 get_line に渡すことで，曜日を表す 3 文字 (Mon/Tue/Wed/Thu/Fri) のいずれかをキーボードから受け取る．
キーボードから受け取った曜日に実施されるすべての授業の情報（曜日/時限/授業名/建物/教室）を表示するようにプログラムせよ．
文字列同士（str と構造体の配列のメンバー class[ i ].dow）の比較は標準関数 strcmp (教科書7.2.2項参照)で行える．
表示は以前に作成した関数 void print_class( struct jugyo a ) の引数の型を変更した void print_class( jugyo_t a ) を用いる．main 関数から class[i] を引数として渡せばよい．
曜日を表す3文字が正しくキーボードから入力されることは前提としてよい．
#include <stdio.h>
#include <string.h>

#define N 13

void print_class( jugyo_t a ){

}

void get_line( char buff[], int size )
{
    int i, c;

    for (i = 0; i < size - 1; i++)
    {
        c = getchar();
        if (c == EOF || c == '\n') break;
        buff[i] = c;
    }
    buff[i] = '\0';
}

int main ( void )
{
    int i;
    char str[ 4 ];

    jugyo_t class[ N ] = {
        { "Thu", 5, "English Communication", 4, 104 },
        { "Wed", 1, "Database", 6, 201 },
    	{ "Fri", 5, "Operating System", 8, 401 },
    	{ "Mon", 4, "English Writing", 4, 102 },
    	{ "Tue", 1, "Programming II", 4, 405 },
    	{ "Tue", 2, "Programming II", 4, 405 },
    	{ "Fri", 3, "Sensing", 4, 402 },
    	{ "Mon", 1, "Probability and Statistics", 4, 402 },
    	{ "Tue", 3, "English Reading", 4, 204 },
    	{ "Thu", 4, "Applied Calculus", 8, 302 },
    	{ "Mon", 2, "Information Theory", 6, 201 },
    	{ "Fri", 1, "Applied Linear Algebra", 8, 305 },
    	{ "Tue", 4, "Signals and Systems", 4, 402 },
    };

    get_line( str, 4 );



	return 0;
}

結果：
曜日を入力してください(英語三文字):Fri
曜日: Fri
時限: 5
授業名: Operating System
建物: 8号館
教室: 401号室

曜日: Fri
時限: 3
授業名: Sensing
建物: 4号館
教室: 402号室

曜日: Fri
時限: 1
授業名: Applied Linear Algebra
建物: 8号館
教室: 305号室

習得した内容・反省・考察など：
曜日を入力させ、その曜日に該当する授業の内容を出力することができた。getline関数を使い文字を入力させ、入力された文字と構造体の配列の各曜日の部分を照らし合わせることでうまく記述することができた。

-----------------------------------------------
(E11_7) 

学習内容：
教科書 p. 341～342 を参考に，次の手順に沿ってテストの点数を処理するプログラムを完成せよ．

main( ) の外部に，次のメンバを持つ struct student 型の構造体を宣言する．さらに typedef によりそれに student_t という別名を付ける．
int no; … 学生番号
int eng; … 英語の点数
int math; … 数学の点数
int sci; … 理科の点数
int total; … 3教科の合計
main( ) の外部で配列の大きさを定義する．「#define N 10」と記述せよ．
main( ) の内部で，student_t 型の構造体の配列 person[N] を定義し，以下に示すデータをセットする．
引数として student_t 型の構造体変数を受け取り，学生のデータ (学生番号/英,数,理,3教科の点数) を表示する関数 void print_student( student_t a ) を完成せよ（この関数が受け取る引数は，"構造体の配列"ではなく，その要素(例えば，person[2])であることに注意）．printf 文で表示した最後に \n で改行すること．
i をカウンタ変数とした for文を用いて， person[ i ] を引数として関数 print_student を繰り返し呼び出すことで，各自の学生番号/各科目の点数/3教科の合計点を順次表示せよ．
引数として student_t 型の構造体の配列を受け取り，各学生についてそれぞれの3教科の合計点を計算して構造体のメンバに代入する関数 void comp_total( student_t data[N] ) を完成せよ．
構造体の配列 person を引数として関数 comp_total を呼び出すことで，各学生の3教科の合計点をセットする
キーボードから4桁の整数を受け取り，学生番号と一致するものが含まれればそのデータ (学生番号/英,数,理,3教科の点数) を関数 print_student で表示し，含まれない場合は「受験していません」と表示せよ．その上で，printf("\n");で改行すること． 
授業の有無を調べるために int 型変数を用意して 0 で初期化する．配列の各要素のメンバ（person[ i ].no）との一致/不一致を調べ，もし該当する授業が存在すれば授業のデータを表示した上で 1 を代入する．最後までこの変数が 0 のままであるなら「受験していません」を表示する．
続いて，キーボードから2桁の整数 a と3桁の整数 b を受け取る．英語，数学，理科の点数がすべて a 以上である場合，もしくは 3科目の合計点が b 以上である場合に合格とする．合格者全員のデータ (学生番号/英,数,理,3教科の点数) を関数 print_student を用いて表示するプログラムを作成せよ．その上で，printf("\n"); で 1 回改行すること．
main 関数にて，N 人の3教科の平均点，および合格者に限定した3教科の平均点をそれぞれ計算して表示せよ．
(プログラム)
#include <stdio.h>

void comp_total( student_t data[N] )
{


}

void print_student( student_t a )
{


}

int main(void)
{
  int i;

  student_t person[ N ] = {
     { 1005, 86, 75, 92, 0 },
     { 1012, 65, 91, 80, 0 },
     { 1043, 45, 75, 58, 0 },
     { 1173, 97, 75, 82, 0 },
     { 1224, 77, 77, 77, 0 },
     { 1397, 27, 62, 35, 0 },
     { 1500, 58, 85, 62, 0 },
     { 1734, 80, 52, 46, 0 },
     { 1888, 98, 93, 96, 0 },
     { 1920, 60, 60, 60, 0 },
  };
  return 0;
}

結果：
四桁の学生番号を入力してください:1224
学生番号:1224
英語の点数:77
数学の点数:77
理科の点数:77
三教科の合計:0

合格点を入力してください:70 200
学生番号:1005
英語の点数:86
数学の点数:75
理科の点数:92
三教科の合計:253

学生番号:1012
英語の点数:65
数学の点数:91
理科の点数:80
三教科の合計:236

学生番号:1173
英語の点数:97
数学の点数:75
理科の点数:82
三教科の合計:254

学生番号:1224
英語の点数:77
数学の点数:77
理科の点数:77
三教科の合計:231

学生番号:1500
英語の点数:58
数学の点数:85
理科の点数:62
三教科の合計:205

学生番号:1888
英語の点数:98
数学の点数:93
理科の点数:96
三教科の合計:287

合格者平均:244
全員の平均点:212

習得した内容・反省・考察など：
学生番号と合格点を入力させ、それぞれに応じた結果を出力することができた。　平均を出力する際に、同じ文字の変数を初期化することを忘れてしまっていた。定義すると同時に初期化する癖をつけていきたい。

-----------------------------------------------
[E11] 全体に対する感想などを以下に記すこと．
所要時間： （        ）時間



