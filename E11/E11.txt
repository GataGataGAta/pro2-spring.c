---------------------------------------------------------
[E11] 第9章 構造体とユーザ定義型 に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E11
学生番号： 37022503
氏名： 山形隼士
作成日： 6/25


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(E11_1)

学習内容：
[T11]で見たように，typedef により，ユーザは新たに型を定義できる．例えば，struct roll 型の構造体に対して，

typedef struct roll roll_t;
とすることで，roll_t 型が定義される．すなわち，それ以降では struct roll 型を「roll_t 型」という名前で簡素に書くことができることになる（逆に言うと，プログラミング実習IIの範囲では，typedef を用いる恩恵はその程度）．
次の手順に沿ってプログラムを作成せよ．

main( ) の外部に，次のメンバを持つ構造体 struct date を宣言せよ．
int y; … 年を表す整数
int m; … 月を表す整数
int d; … 日を表す整数
typedef を用いて struct date から「新しい型」 date_t を宣言せよ．
main( ) の内部に date_t 型の構造体変数 my_day を宣言せよ．再度，教科書 9.5.1 項をよく読み，ユーザ定義型の変数を宣言するにはどうすればよいか，自ら考えよ．
今日の日付など好きな日にあわせて，my_day の各メンバに値を代入せよ．
引数として受け取った date_t 型の構造体変数の内容を，「今日は，2023年 6月20日です．」という形式で表示するように，関数 void print_day2(date_t this_day) を完成せよ．

結果：
2023年, 6月25日です。

習得した内容・反省・考察など：
構造体にtypedefをつかって、別名をつけることができた。また、別名を使って構造体を定義し、構造体の中の要素を定義することができた。

-----------------------------------------------
(E11_2) 

学習内容：
次の手順に沿って，構造体を用いた複素数の演算を行うプログラムを作成せよ．

問題文中の補足説明を追加したため，変数名が変更された箇所があります（2023/6/20, 13:00）．それ以前に解いている場合は，修正は不要です．
次のようなメンバを持ち複素数を表す構造体 struct s_complex を宣言する．
double re; … 複素数の実数部
double im; … 複素数の虚数部
main 関数の外側で typedef 宣言を用いて，上記の構造体を complex_t 型として参照できるようにせよ（main 関数の中で typedef をすると，complex_t 型が他の関数から参照できない）．
main 関数にてキーボードから2つの複素数の情報を受け取り，complex_t 型の変数 x および y にセットせよ．．
複素数 x について，実数を2個受け取り，それらを x.re および x.im とすればよい．
複素数 y についても同様．
実数を受け取る際の scanf の書式は %lf である．
引数として complex_t 型の変数を 1 つ受け取り，その値を（i を虚数単位とする）
  3.14000 + 2.43000 i  
のように表示する関数 void complex_print( complex_t a ) を作成せよ．complex_t 型の変数 a のメンバである a.re と a.im は double 型であるため，これらを printf で表示すればよい.
complex_t 型の変数 x を引数として，関数 complex_print を呼び出し，正しく表示されることを確認せよ．y についても同様．
2個の複素数を引数として，それらの加算を行った結果を戻り値とする関数 complex_t complex_add( complex_t a, complex_t b ) を作成する． この関数は， complex_t 型の変数 2 つを引数として受け取り，complex_t 型を戻り値とすることに注意する． 以下に手順の一例を示す．
complex_t 型の変数 sum を定義する．
sum の実数部 sum.re と虚数部 sum.im を a.re, a.im, b.re, b.im から計算する．
sum を戻り値とする
2個の複素数を引数として，それらの乗算を行った結果を戻り値とする関数 complex_t complex_mul( complex_t a, complex_t b ) を作成する． この関数は， complex_t 型の変数 2 つを引数として受け取り，complex_t 型を戻り値とすることに注意する． 以下に手順の一例を示す．
complex_t 型の変数 prod を定義する．
prod の実数部 prod.re と虚数部 prod.im を a.re, a.im, b.re, b.im から計算する．
prod を戻り値とする
main 関数にて，x と y の加算と乗算の結果を表示するプログラムを，本問で扱った 3つの関数を用いて作成せよ． 

たとえば，x = 1.5 + 2.1 i と y = 0.3 - 2.5 i の加算と乗算の結果はそれぞれ
x + y = (1.5 + 0.3) + (2.1 + (-2.5)) i = 1.8 - 0.4 i
x y = (1.5*0.3 + 2.1*(-2.5)*(-1)) + (1.5*(-2.5)+2.1*0.3) i = 5.7 - 3.12 i
である．

結果：
複素数を入力して下さい。1.2222 2.1111
複素数を入力して下さい。3.2222 4.1111
一つ目の複素数:1.222200 + 2.111100i
二つ目の複素数:3.222200 + 4.111100i
足し算:4.444400 + 4.222200i
掛け算:3.938173 + 8.678943i

習得した内容・反省・考察など：
構造体を使った関数の使い方を勉強することができた。構造体の関数を使うときには、引数.要素(a.no)のように記述することで、うまく計算させることができた。

-----------------------------------------------
(E11_3) 

学習内容：
構造体のポインタに関する以下の問題に解答せよ． [リスト9.1] について，[T11] の冒頭に記した注意事項を反映した上で（以前に自分で作成したプログラムは流用してよい），以下の変更を加えよ．

struct roll 型の構造体変数 my_data; を定義する．
struct roll 型のポインタ struct roll *a; を定義する．
ポインタ a に，構造体変数 my_data のアドレスを代入する．
a が指し示す構造体変数のメンバにデータを代入する．ただし，メンバの参照の上で矢印演算子（9.4.2節参照）を用いること．
a が指し示す構造体変数のメンバを表示せよ．

結果：
NAME         BIRTHDAY   ZIP      ADDRESS                      TEL
Hinako       19090225   1234567  Yokohama-shi Kanagawa Pref.  045-123-4567

習得した内容・反省・考察など：
構造体のポインタについて勉強することができた。構造体のポインタを使用するときには、矢印演算子(->)を使うことを忘れないようにしておきたい。

-----------------------------------------------
(E11_4) 

学習内容：
 関数への変数や構造体の受け渡しに関するプログラムについて以下に解答せよ．(プログラム c を提出すること)

下記に示す(プログラムa)～(プログラムd)を読んで，実行したときのそれぞれの表示を予想し，考察欄に記せ．
コンパイル・実行し，結果を確認し，考察欄にて報告せよ．呼び出された関数 my_func( ) 中の代入は main( ) 中の変数 x，構造体変数 p および配列 array の値に影響を与えたか？各プログラムにおける関数の引数がどのようなものであり，それが結果にどのように影響したかを考察欄に記せ．
矢印演算子 -> については 9.4.2項を参照のこと． 
(プログラム a)
#include <stdio.h>

void my_func( int x )
{
  x += 5;
}

int main( void )
{
  int x;

  x = 3;
  
  my_func( x );

  printf(" x = %d \n", x );

  return 0;
}




(プログラム b)
#include <stdio.h>

struct point {
  int x;
  int y;
};

void my_func(struct point p)
{
  p.x += 5;
  p.y += 5;
}

int main(void)
{
  struct point p;

  p.x = 1;
  p.y = 2;
  
  my_func(p);

  printf("x = %d,  y = %d\n", p.x, p.y);

  return 0;
}



(プログラム c)
#include <stdio.h>


struct point {
  int x;
  int y;
};

void my_func(struct point *p)
{
  (*p).x += 5;
  p->y += 5;
}

int main(void)
{
  struct point p;

  p.x = 1;
  p.y = 2;

  my_func(&p);

  printf("x = %d,  y = %d\n", p.x, p.y);

  return 0;
}



(プログラム d)
#include <stdio.h>

struct point {
  int x;
  int y;
};

void my_func(struct point p[])
{
  int i;

  for( i = 0; i < 2; i++ )
  {
    p[i].x += 5;
    p[i].y += 5;
  }
}

int main(void)
{
  struct point p[2];

  p[0].x = 1;
  p[0].y = 2;

  p[1].x = 3;
  p[1].y = 4;

  my_func( p );

  printf("p[0].x = %d,   p[0].y = %d\n", p[0].x, p[0].y);
  printf("p[1].x = %d,   p[1].y = %d\n", p[1].x, p[1].y);

  return 0;
}

結果：


習得した内容・反省・考察など：

-----------------------------------------------
(E11_5) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
(E11_6) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
(E11_7) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
(E11_8*) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
[E11] 全体に対する感想などを以下に記すこと．
所要時間： （        ）時間



