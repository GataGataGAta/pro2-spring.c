---------------------------------------------------------
[E9] 第8章 ポインタ に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E9
学生番号： 
氏名： 
作成日： 


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(E9_1)

学習内容：
(E9_1) 下のプログラムをコンパイルして実行せよ．表示される結果 (1) と (2) に対して, なぜそのような結果が表示されるのかを, 次の例に倣って説明せよ.

(例) WWW からコピー＆ペーストして用いよ.
(0) では

     a=1234, b=1972, c=1234, p= 0xffffcbe8, q=0xffffcbe0, *p=1234, *q=1972

と表示される. まず,

    p = &a;
    q = &b;

を実行すると, p に a のアドレスが, q に b のアドレスが入る.  この時点で
の変数のアドレスと内容は, 次の通りである.

  0xffffcbfc番地  a = 1234
  0xffffcbf8番地  b = 5678
  0xffffcbf4番地  c = 7777
  0xffffcbe8番地  p = 0xffffcbfc (a のアドレス)
  0xffffcbe0番地  q = 0xffffcbf8 (b のアドレス)

次に,

    c = *p;

を実行する. *p は「0xffffcbfc番地の内容」なので, それはつまり a の内容
である. 言い換えると, この文は,

    c = a;

と等価であり, c には 1234 が代入される. 次に,

   *q = 1972;

であるが, *q は「0xffffcbf8番地の内容」なので, それはつまり b の内容で
ある. 言い替えると, この文は,

    b = 1972;

と等価であり, b には 1972 が代入される. 従って, (0) の時点では,

    a = 1234
    b = 1972
    c = 1234
    p = 0xffffcbfc   (a のアドレス)
    q = 0xffffcbf8   (b のアドレス)
    *p = 1234        (a の内容)
    *q = 1972        (b の内容)

が表示される.
(プログラム)
#include <stdio.h>

int main(void)
{
  int a = 1234;
  int b = 5678;
  int c = 7777;
  int *p, *q;

  printf("a の番地は %p \n", &a);
  printf("b の番地は %p \n", &b);
  printf("c の番地は %p \n", &c);
  printf("p の番地は %p \n", &p);
  printf("q の番地は %p \n", &q);

  p = &a;
  q = &b;
  c = *p;
  *q = 1972;
  printf("(0) a=%d, b=%d, c=%d, p=%p, q=%p, *p=%d, *q=%d\n", a, b, c, p, q, *p, *q);

  p = &b;
  q = &c;
  a = *q + 10;
  *p = 9999;
  printf("(1) a=%d, b=%d, c=%d, p=%p, q=%p, *p=%d, *q=%d\n", a, b, c, p, q, *p, *q);

  p = q;
  *p = *q / 2;
  printf("(2) a=%d, b=%d, c=%d, p=%p, q=%p, *p=%d, *q=%d\n", a, b, c, p, q, *p, *q);

  return 0;
}

結果：
a の番地は 0x16d3b3348 
b の番地は 0x16d3b3344 
c の番地は 0x16d3b3340 
p の番地は 0x16d3b3338 
q の番地は 0x16d3b3330 
(0) a=1234, b=1972, c=1234, p=0x16d3b3348, q=0x16d3b3344, *p=1234, *q=1972
(1) a=1244, b=9999, c=1234, p=0x16d3b3344, q=0x16d3b3340, *p=9999, *q=1234
(2) a=1244, b=9999, c=617, p=0x16d3b3340, q=0x16d3b3340, *p=617, *q=617

習得した内容・反省・考察など：
(1) では

     a=1234, b=1972, c=1234, p= 0x16d3b3348, q=0x16d3b3344, *p=1234, *q=1972

と表示される. まず,

    p = &b;
    q = &c;

を実行すると, p に b のアドレスが, q に c のアドレスが入る.この時点で
の変数のアドレスと内容は, 次の通りである.

  0x16d3b3348番地  a = 1234
  0x16d3b3344番地  b = 1972
  0x16d3b3340番地  c = 1234
  0x16d3b3338番地  p = 0x16d3b3344　(b のアドレス)
  0x16d3b3330番地  q = 0x16d3b3340　(c のアドレス)

次に,

    a = *q + 10;

を実行する. *q は「0x16d3b3344番地の内容」なので, それはつまり c の内容
である. 言い換えると, この文は,

    a = c + 10;

と等価であり, a には 1244 が代入される. 次に,

    *p = 9999;

であるが, *p は「0x16d3b3338番地の内容」なので, それはつまり b の内容で
ある. 言い替えると, この文は,

    b = 9999;

と等価であり, b には 9999 が代入される. 従って, (1) の時点では,

    a = 1244 (aのアドレス＋10)
    b = 9999 
    c = 1234
    p = 0x16d3b3344   (b のアドレス)
    q = 0x16d3b3340   (c のアドレス)
    *p = 9999        
    *q = 1234        

が表示される.

(2) では

     a=1244, b=9999, c=617, p= 0x16d3b3340, q=0x16d3b3340, *p=617, *q=617

と表示される. まず,

    p = q;
    *p = *q / 2;

を実行すると, p に q のアドレスが, *p に *q の内容を1/2したものが入る. 
また、*pとは0x16d3b3340番地の内容、つまりcであるため

    c = c / 2;

と等価となる。
この時点での変数のアドレスと内容は, 次の通りである.

  0x16d3b3348番地  a = 1234
  0x16d3b3344番地  b = 9999
  0x16d3b3340番地  c = 617
  0x16d3b3338番地  p = 0x16d3b3340　(q のアドレス)
  0x16d3b3330番地  q = 0x16d3b3340　(c のアドレス)

  また、pとqは同じアドレスであるため、内容も同じになる。つまり、＊pと＊qの内容が一致するため

  *p = *q

  より、*qの内容もc / 2したものとなる。
 
従って, (2) の時点では,

    a = 1234
    b = 1972
    c = 1234
    p = 0x16d3b3340  (q のアドレス)
    q = 0x16d3b3340  (c のアドレス)
    *p = 617        (a の内容)
    *q = 617        (b の内容)

が表示される.

-----------------------------------------------
(E9_2) 

学習内容：
下のプログラム中の関数 void sub(int*, int*) は,

2 つの整数型変数のポインタを受け取り,
1 つ目のポインタの指す変数の値を 1 増やし,
2 つ目のポインタの指す変数の値を 2 倍する,
というものである. a=10, b=20 に対して sub(&a,&b) を呼び出すと,
before: a=10, b=20
after:  a=11, b=40
が表示される. このプログラムの sub を書き換え,
１つ目のポインタの指す変数と２つ目のポインタの指す変数の積を１つ目のポインタの指す変数に代入する
その上で，２つ目のポインタの指す変数と１つ目のポインタの指す変数の積を２つ目のポインタの指す変数に代入する
というプログラムを作成せよ. 実行し,
before: a=10,b=20
after: a=200,b=4000
となることを確認せよ.
#include <stdio.h>

void sub( int *x, int *y )
{
  *x = *x + 1;
  *y = *y * 2;
}

int main(void)
{
  int a = 10;
  int b = 20;

  printf("before: a=%d, b=%d\n", a, b);

  sub( &a, &b );    // a と b のアドレスを渡している

  printf("after:  a=%d, b=%d\n", a, b);

  return 0;
}

結果：
before: a=10, b=20
after:  a=200, b=4000

習得した内容・反省・考察など：
ポインタを使った関数の使い方について勉強することができた。ポインタを使っている時でも変数の時と同じように使うことができたが、アスタリスクをつけるのかつけないのかということはしっかり区別していきたい、

-----------------------------------------------
(E9_3) 

学習内容：
 [リスト 8.13] を入力し，コンパイル・実行せよ．ただし，x と y の値はキーボードから受け取るように変更せよ． [リスト 8.12]との結果の相違について，レポートにて説明せよ． 
続いて，[リスト8.13] を参考に，以下のプログラムを作成して提出せよ．

2つの整数をキーボードから受け取り，int 型変数 x, y に代入する．
2つの int 型変数へのポインタを受け取り, 値が小さい方の数を 1 番目のポインタの指す変数に, 大きい方の数を 2 番目のポインタの指す変数にセットする関数 void sort2(int *a, int *b) を作成せよ.
main 関数から，x と y のアドレスを関数 sort2 に渡す．その上で，main 関数で x と y の値を表示し，その大小関係を確認せよ．
教科書5章で学んだ関数では戻り値をひとつしか持たなかった．一方，このプログラムでは関数での複数の計算結果を main 関数にて参照可能（値を main 関数に返すことができる）である点に注意せよ．

結果：
整数を入力してください>>>1 10
x=1     y=10

整数を入力してください>>>10 1
x=1     y=10

習得した内容・反省・考察など：
入力された値の代償比較をすることができた。今まで勉強してきた関数では、返り値が一つしかなく、今回のようなケースでは、xかyのどちらかしか返すことができなかったが、この関数では両方返すことができた。

-----------------------------------------------
(E9_4) 

学習内容：
下のプログラムは，秒数をキーボードから整数として受け取り，それが何分何秒であるかを表示するものである（秒数は60未満の整数とする）．適切に記述を行うことでプログラムを完成せよ．関数で計算された2個の値を main 関数で参照できることを理解せよ．

#include <stdio.h>

void s_to_ms( int *m, int *s ){

  // ここで計算を行う

}

int main(void)
{
  int m = 0;
  int s;

  printf("秒を入力して下さい \n");
  scanf("%d", &s);

  // ここで，m と s のアドレスを引数として渡すことで関数 s_to_ms を呼び出す

  printf("%d 分 %d 秒です\n", m, s );

  return 0;
}

結果：
秒を入力して下さい 
100
1 分 40 秒です

秒を入力して下さい 
490
8 分 10 秒です

習得した内容・反省・考察など：
今回の課題でも、ひとつ前の課題と引き続いて関数の返り値について勉強することができた。返り値として分(入力された秒数を60で割った商)と、秒(入力された秒を60で割ったあまり)を参照することができた。

-----------------------------------------------
(E9_5) 

学習内容：
 下のプログラムに文を追加して, i, a[0], a[1], a[2], a[3] のアドレスと値を表示せよ．また，同様に a, a+1, a+2, a+3 およびその値についても表示する． ポインタに対する printf の書式は %d ではなく, %p を用いよ． その上で，課題 (T9_1) と同様に, どのアドレスにどの変数が格納されその値がいくらであるかを示す図を作成せよ.

#include <stdio.h>

int main( void )
{
  int i;
  int a[4];
  a[0] = 100;
  a[1] = 101;
  a[2] = 102;
  a[3] = 103;

  // i のアドレス（ &i ）を書式 %p で表示する printf 文を書く
  // a[0]～a[3] のアドレス（ &a[0], &a[1], &a[2], &a[3] ）を書式 %p で表示する printf 文を書く
  // a, a+1, a+2, a+3 を書式 %p で表示する printf 文を書く

  printf("\n");

  // i の値を書式 %d で表示する printf 文を書く
  // a[0]～a[3] の値（ a[0], a[1], a[2], a[3] ）を書式 %d で表示する printf 文を書く
  // *a, *(a+1), *(a+2), *(a+3) を書式 %d で表示する printf 文を書く

  return 0;
}

結果：
0x16fabf330

0x64
0x65
0x66
0x67

0x64
0x65
0x66
0x67

1873540208

100
101
102
103

100
101
102
103

習得した内容・反省・考察など：
アドレス         内容
           ├──────┤
0x16b767338│  100       │
           ├            ┤
0x16b76733c│  101       │
           ├            ┤
0x16b767340│  102       │
           ├            ┤
0x16b767344│  103       │
           ├──────┤


-----------------------------------------------
(E9_6) 

学習内容：
下のプログラムを入力し，コンパイル・実行する．出力についてそれが得られた理由をレポートにて説明せよ．

#include <stdio.h>
#define SIZE 5

int add( int a, int *b, int c[], int *d ){

  int i;

  a++;
  (*b)++;

  for( i=0; i < SIZE; i++ )
    c[i]++;

  for( i=0; i < SIZE; i++ )
    (*(d+i))++;

  return a;
}

int main(void)
{
  int i;
  int a, b, e;
  int c[SIZE], d[SIZE];

  a = 10;
  b = 10;
  for( i=0; i < SIZE; i++ ){
    c[i] = i;
    d[i] = i;
  }
  /* c[0] = 0, c[1] = 1, ..., c[4] = 4; */
  /* d[0] = 0, d[1] = 1, ..., d[4] = 4; */


  /* 以下で a, b, c[], d[] を表示 */
  printf(" a = %d, b = %d \n", a, b );
  for( i=0; i < SIZE; i++ )
    printf(" c[%d] = %d, d[%d] = %d \n", i, c[i], i, d[i] );


  e = add( a, &b, c, d );


  /* 以下で a, b, e, c[], d[] を表示 */
  printf("\n");
  printf(" a = %d, b = %d, e = %d \n", a, b, e );
  for( i=0; i < SIZE; i++ )
    printf(" c[%d] = %d, d[%d] = %d \n", i, c[i], i, d[i] );

  return 0;
}

結果：
a = 10, b = 10 
 c[0] = 0, d[0] = 0 
 c[1] = 1, d[1] = 1 
 c[2] = 2, d[2] = 2 
 c[3] = 3, d[3] = 3 
 c[4] = 4, d[4] = 4 

 a = 10, b = 11, e = 11 
 c[0] = 1, d[0] = 1 
 c[1] = 2, d[1] = 2 
 c[2] = 3, d[2] = 3 
 c[3] = 4, d[3] = 4 
 c[4] = 5, d[4] = 5

習得した内容・反省・考察など：
a = 10;
b = 10;
  for( i=0; i < SIZE; i++ )
  {
    c[i] = i;
    d[i] = i;
  }
この文を実行すると、変数aに10、bに10、c[i]とd[i]にそれぞれ0から4が代入される。

a = 10, b = 10 
 c[0] = 0, d[0] = 0 
 c[1] = 1, d[1] = 1 
 c[2] = 2, d[2] = 2 
 c[3] = 3, d[3] = 3 
 c[4] = 4, d[4] = 4 

よって、この出力が得られる。

また、e = add( a, &b, c, d );を実行することで、
この関数の返り値である、aの値に＋1したものがeに代入される(e = 11)
また、関数の中で＊b++を実行することで、bの変数の値が＋1される。
その後の、
for( i=0; i < SIZE; i++ )
    c[i]++;

  for( i=0; i < SIZE; i++ )
    (*(d+i))++;
を実行することで、c[]の値にそれぞれ+1し、*(d + 1)とはd[i]と同義であるため、これもc[]と同じく、配列の要素を+1づつしている。

a = 10, b = 11, e = 11 
 c[0] = 1, d[0] = 1 
 c[1] = 2, d[1] = 2 
 c[2] = 3, d[2] = 3 
 c[3] = 4, d[3] = 4 
 c[4] = 5, d[4] = 5 

よって、この出力が得られる。
-----------------------------------------------
(E9_7*) 

学習内容：

結果：

習得した内容・反省・考察など：

-----------------------------------------------
[E9] 全体に対する感想などを以下に記すこと．
所要時間： （4）時間
今回の課題では、ポインタについて勉強することができた。配列とは似ているが少し違うものとして認識することができたので、これからどんどん実用的な使い方を勉強していきたい。


