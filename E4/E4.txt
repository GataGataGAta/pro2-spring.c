---------------------------------------------------------
[E4] 第5章 関数(1) に関する考察・感想用テンプレート
---------------------------------------------------------

課題： E4
学生番号： 
氏名： 
作成日： 


（注意）【以下は確認の上，消去してからレポート提出を行って下さい】
  ・ プログラミングの力がつかないため，他の学生・先輩などが作成したプ
       ログラムをコピーすることは厳禁です．

  ・ 各課題に対して，
      - 学習内容（どのようなプログラムを作成したか，この課題を通して学んだ事項，
           作成中に間違えた箇所，など）
      - 結果（結果を報告する．実行結果も貼り付けよ）
      - 習得した内容，苦労した点，工夫した点，考察など
     について必ず記すこと．

  ・ プログラムが完成次第，1問ごとにその都度以下のレポート欄に
       記入して下さい．あとからまとめて記そうとすると，書くべき事項を
       忘れることが多くあります．

-----------------------------------------------
(E4_1)

学習内容：
ある店の商品は単価がすべて100円（税込）であり，これに購入個数を乗じた金額に加えて，レジ袋代が5円課金される．

1) 購入個数を引数とし，支払金額を戻り値とする関数 int price( int x ) を作成せよ．
2) main 関数においてキーボードから購入個数（正の整数）を受け取り，int 型変数 num に代入する．
3) 関数 price を用いて支払金額を計算して，戻り値を int 型変数 payment に代入し，表示せよ．
いくつかの数値に関して，手計算の結果と一致することを確認せよ．

結果：
何個購入しますか？--->4
合計405円のお買い上げです。

何個購入しますか？--->58
合計5805円のお買い上げです。

何個購入しますか？--->2402
合計240205円のお買い上げです。

習得した内容・反省・考察など：
関数を自分で定義すること絵プログラムを作成することができた。返り値に少し苦戦したが、問題なく作成することができた。

-----------------------------------------------
(E4_2) 

学習内容：
整数 x を引数とし，f (x) = 2x2 - 5x + 3 の値を戻り値とする関数 int polynomial( int x ) を作成せよ． 
次に，main 関数において，キーボードから整数を受け取り，int 型の変数 a に代入する． for 文を用いて関数 polynomial を複数回呼び出すことで，f(1)，f(2)，…，f(a)を計算して表示するプログラムを作成せよ． 

結果：
Please enter the number--->5
f(0)=3
f(1)=0
f(2)=1
f(3)=6
f(4)=15
f(5)=28

習得した内容・反省・考察など：
for文の中で関数を呼び出すことで、複数回関数を利用することができた。

-----------------------------------------------
(E4_3) 

学習内容：
以下の関数 void print_int( int x ) を入力せよ． 
次に，main 関数において，整数型の変数 i を1から10まで増やしながら，その都度 i を 引数として関数 print_int を呼び出し，実行結果を確認せよ． main 関数では for 文を用いること． 
「void 型関数」とはどのようなものであるか，また関数 print_int には戻り値がないがこれでよいのか，などをレポートに記せ．

void print_int( int x )
{
  printf( "your number is %d \n", x );
}

結果：

習得した内容・反省・考察など：
void型関数とは、戻り値がない関数のことを指す。つまり、関数が何らかの処理を行って終了する場合に、その関数が返す値がない場合に使われる。それゆえ、print_intはvoid型であるため、返り値は必要ない。

-----------------------------------------------
(E4_4) 

学習内容：
正の整数 t, h を引数とし，底面が一辺の長さtの正方形で高さがhである四角錐の体積 t2h/3 を計算して戻り値とする関数 double pyramid( int t, int h ) を定義せよ. 
さらに，main 関数から関数 pyramid を呼び出すことで， 5≤i≤10 の整数 i について，底面が一辺の長さ i の正方形で高さが i+2 である四角錐の体積 i2(i+2)/3 を計算して下記を出力するプログラムを作成せよ．

結果：
 i   pyramid
 5  58.333333
 6  96.000000
 7  147.000000
 8  213.333333
 9  297.000000
10  400.000000

習得した内容・反省・考察など：
関数内にて、返り血を計算する際に、int型で計算してしまっていたので、計算結果がお手本とずれてしまっていた。double型にキャストすることで改善することができた。

-----------------------------------------------
(E4_5) 

学習内容：
半径と中心角が与えられた扇形の面積を計算する．

1) 実数 r と整数 a を引数とし，半径が r，中心角が a（度） である扇形の面積を出力する関数 double area( double r, int a ) を作成せよ． ただし，円周率は M_PI を利用すること．角度に関する計算の際にキャストが必要となる可能性があることに注意せよ．
2) main 関数においてキーボードから正の実数を受け取り，double 型変数 x に代入する．実数を受け取る際の scanf の書式は %lf とする．
3) 360未満である正の整数を受け取り，int 型変数 y に代入する．
4) 関数 area を用いることで，半径が x，中心角が y（度） である扇形の面積を計算して表示せよ．

結果：
Please enter numbers--->10, 180
157.079633

Please enter numbers--->10, 90
78.539816

習得した内容・反省・考察など：
数値を入力する部分でエラーが起こってしまい、改善に時間がかかった。スペースやコンマは混同しないようにしていきたい。

-----------------------------------------------
(E4_6) 

学習内容：
)正の整数 n が与えられたとき，1 以上 n 以下の整数の和 sum = 1 + 2 + … + n を計算して出力したい．

1) int 型変数 n を引数とし，for 文を用いて sum を計算した結果を戻り値とする関数 int sum_by_loop( int n ) を作成せよ．
2) 「和の公式」を用いて sum を計算して戻り値とする関数 int sum_by_formula( int n ) を作成せよ．関数 sum_by_formula については，以下にサンプルと課題が与えられている．
3) main 関数の中でキーボードから整数 input を受け取る．これを引数として，関数 sum_by_loop と sum_by_formula をそれぞれ呼び出し，戻り値を表示せよ（「for 文による計算結果は ? です」「和の公式による計算結果は ？ です」のように表示する） ．
いくつかの数値に関して，手計算の結果と一致することを確認せよ．
以下は関数 sum_by_formula のサンプルであるが，入力によっては誤った計算結果を返す可能性があるため，修正が必要となる．誤った結果となるnの例を挙げ，そのようになった理由をレポートにて報告するとともに，nによらず正しい結果となるように修正せよ．

int sum_by_formula( int n )
{
  return ( n + 1 ) / 2 * n;    
}

結果：
正数を入力してください。--->10
55
55

習得した内容・反省・考察など：
元々のプログラムでは、入力する引数がint型になってしまっていたため、偶数を代入したときに小数点以下が切り捨てされていたため計算がうまくいかなかったと考えられる。そのため、double型に修正した。

-----------------------------------------------
(E4_7) 

学習内容：
（数学的な）関数 f(x) = x2 - 4 x + 2 について，2 ≤ x における逆関数は f-1(x) = 2 + ( x + 2 )1/2 であることが導かれる（手計算で確認して見よ）．

1) x を引数として f(x) を戻り値とする関数 double func( double x )を作成せよ．
2) x を引数としてf-1(x) を戻り値とする関数 double inverse( double x ) をそれぞれ作成せよ．平方根は <math.h> をインクルードした上で教科書 表4.8の数学関数を利用できる．
3) キーボードから 2 以上の整数 n を受け取り，2 以上 n 以下の整数 x に対して，x と f(x) および f-1( f(x) ) の値を表示するプログラムを関数 func と inverse を用いて作成せよ．
(注) x はdouble 型にキャストした上で関数 func に渡すこと．main 関数で，func の戻り値を double 型の変数に代入した上で，さらにそれを 関数 inverse の引数とすればよい．

結果：
2以上の正数を入力してください。--->6
14.000000
6.000000

習得した内容・反省・考察など：
平方根の使い方を忘れてしまっていた。普段あまり使わない動作は忘れがちになっているので、定期的に復習していきたい。

-----------------------------------------------
(E4_8) 

学習内容：
次のプログラムには色々な誤りがあって，コンパイルできない． 間違いを修正し，下の「期待する実行結果」と同じ出力が得られるようにせよ． 
※ プログラムは, 手で打ち込んでもよいが，WWWブラウザで表示してコピー&貼り付けした方が効率的で間違いがない. 
※ 「間違い探し」は関数の宣言だけでなく, main 関数の中の変数の型や printf のフォーマットにも注意せよ.

#include <stdio.h>

int char_plus( int );

int main( void )
{
	char c, ck;
	int k;
	double x, y;
	double n;

	c = 'f';
	k = 3;
	ck = char_plus( c, k );
	printf( "'%c' の %d 個後の文字は '%c' です\n", c, k, ck );

	x = 2.0;
	n = 5;
	y = ssum( x, n );
	printf( "x = %d, n = %d, y = %f \n", x, n, y );

	return 0;
}


/* 文字 c の k 個後の文字を返す */
char char_plus( char c, int k )
{
	return c + k;
}

/* 文字 c の ( k + 3 ) 個後の文字を返す */
char char_plus( char c , int k )
{
	return c + ( k + 3 );
}

/* 1 + 1/x + 1/(x*x) + 1/(x*x*x) + ... + 1/x^k を計算して返す */
double ssum( double x, int k )
{
	int i;
	double s, r;
	s = 1;
	r = 1;
	for ( i = 1; i <= k; i++ ){
		r /= x;
		s += r;
	}

	return s;
}

結果：
'f' の 3 個後の文字は 'i' です
x = 2.000000, n =  5, y = 1.968750 

習得した内容・反省・考察など：
修正箇所がわかりづらく、想像以上に時間がかかってしまった。まず二つ目のchar_plusを削除して、c+kを計算するようにした。二つ目にxの表示の部分を変更した。

-----------------------------------------------
(E4_9*) 

学習内容：
キーボードから自然数 n を受け取り，その素因数分解を行うプログラムを作成せよ．例えば，n = 340 を入力した場合，

340 -> 2 2 5 17
のように表示されるようにせよ．
次の結果が得られることを確認せよ．
n = 7171 → 7171 -> 71 101
n = 340 → 340 -> 2 2 5 17
n = 756 → 756 -> 2 2 3 3 3 7
n = 13 → 13 -> 13

結果：
自然数を入力してください--->7171
7171 -> 71 101 

自然数を入力してください--->340
340 -> 2 2 5 17 

自然数を入力してください--->756
756 -> 2 2 3 3 3 7 

自然数を入力してください--->13
13 -> 13 

習得した内容・反省・考察など：
for文とwhile文を使って、nをiで割り、その割った後の値をnにもう一度代入することでうまく計算することができた。

-----------------------------------------------
[E4] 全体に対する感想などを以下に記すこと．
所要時間： （7）時間
今回の課題では、関数について重点的に勉強することができた。また、関数の方をしっかりと吟味しないと自分が期待した動作をしないということがわかったため、次からは関数の型とキャストには気を配って作成していきたい。



