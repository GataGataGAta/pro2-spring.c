---------------------------------------------------------
[T4] 第5章 関数(1) に関する考察・感想用テンプレート
---------------------------------------------------------

課題： T4
学生番号： 37022503
氏名： 山形隼士
作成日： 5/2

-----------------------------------------------
(T4_1)

学習内容：
[リスト 5.1] をコンパイルせよ．コンパイルは失敗するので，どのようなエラーメッセージが表示されるか，そしてそれがどういう意味 (と考えられるか) かをレポートに記せ．

[リスト 5.3] （[リスト 5.1] に関数 powint の定義を追加）をコンパイル，実行し，教科書と同じ実行結果が得られることを確認せよ

結果：
T4_1.c:9:13: error: implicit declaration of function 'powint' is invalid in C99 [-Werror,-Wimplicit-function-declaration]
        j = powint(2, i, j);
            ^

0       1
1       2
2       4
3       8
4       16
5       32
6       64
7       128
8       256
9       512
10      1024

習得した内容・反省・考察など：
一つ目のエラーはpowintという関数が定義されていないので発生したエラーと考えられる。その後、関数を定義する文を追加したところ、教科書と同じ結果が得られた。
-----------------------------------------------
(T4_2) 

学習内容：
以下のプログラムをコンパイルおよび実行し，どのような結果が得られるかをレポートに記せ． さらに，このプログラムに関する以下の1～6の質問に対して考察欄にて詳しく説明せよ．

1.int calc( int x ) の int 型変数 x は何と呼ばれるか．また， x の値はどのようにして与えられるか．
2.int calc( int x ) の最初の int は整数型を意味するが，何が整数型であるのか．
3.calc 関数の中の return y; によりどのようなことが行われるか．
4.main 関数の中の result = calc( input ); の input は何と呼ばれるか．また，この文によりどのような操作が行われているか．
5.calc 関数の中では変数 input や result は現れていないが，これでよいのか?
6.結局，このプログラムは何をしているのか?

#include <stdio.h>

int calc( int x )
{
    int y;

    y = 3 * x * x - 7;

    return y;
}

int main( void )
{
    int input, result;

    printf( "整数を入力して下さい\n" );
    scanf( "%d", &input );

    result = calc( input );

    printf( "%d %d\n", input, result );

    return 0;
}

結果：
整数を入力して下さい
100
100 29993

習得した内容・反省・考察など：
1.名前 引数、main関数の中でxの値は与えられる。　
2.戻り値が整数型であることを表している
3.計算された関数の値が戻り値として戻される。
4.実引数、ユーザーが入力した値を関数の中に代入している。また、この文では、ユーザーが入力した値が calc 関数に渡され、その結果が変数 result に代入されている
5.良い。関数内で使用される変数は、関数の引数や関数内で宣言されたローカル変数などであり、input や result は main 関数のローカル変数であり、calc 関数では使えない。
6.ユーザーに聖数を入力させ、それをcalc関数に渡して計算をしている。

-----------------------------------------------
(T4_3) 

学習内容：
以下の関数 int subt( int x ) は，整数 x を入力（引数）とし，それから 5 を引いて出力する（戻り値として返す）ものである． [リスト 5.3] を参考にして，関数 subt を呼び出した上で，得られた結果を表示するプログラムを作成せよ． 
処理の流れは以下のようになる．

main 関数の中で，キーボードから整数を受け取り， int 型の変数 input に代入する．
変数 input を引数として関数 subt を呼び出し，関数の出力（戻り値）を（main 関数内で）int 型の変数 result に代入する．
最後に変数 result の値を表示する．

結果：
Please enter the number--->10
5

Please enter the number--->20
15

Please enter the number--->33
28

習得した内容・反省・考察など：
まず関数であるsubtを定義した後、main文の中で使用することを勉強することができた。関数はpythonで苦戦したため、しっかり時間をかけて理解していきたい。

-----------------------------------------------
(T4_4) 

学習内容：
 2個の実数 x，y を入力（引数）とし，その積を計算して出力する（戻り値として返す）関数 double prod_d( double x, double y ) を作成せよ．ただし，本関数内には以下に示すように return 文のみを記述せよ．

結果：
Please enter numbers--->4, 8
4 X 8 = 32

Please enter numbers--->100, 7
100 X 7 = 700

Please enter numbers--->365, 241
365 X 241 = 87965

習得した内容・反省・考察など：
関数の中で、returnの部分のみ記述したが、問題なく動かすことができた。自分は変数を後先考えずに定義してしまう癖があるため、関数の中では必要に応じて定義するようにしていきたい。

-----------------------------------------------
(T4_5) 

学習内容：
半径が与えられたとき，円の面積を求めて表示するプログラムを作成せよ．

1) 実数 r を引数とし，半径が r である円の面積を戻り値として返す関数 double area( double r ) を作成せよ．
2) 次に， main 関数において，キーボードから実数を受け取り，double 型の変数 a に代入する． 関数 area を用いることで，半径が a である円の面積を計算して表示するプログラムを作成せよ．
関数内で行う計算は円周率の値を必要とする． <math.h> をインクルード（#include <math.h>）しておけば，プログラム内で M_PI と書くことで正確な（十分な精度を有する）円周率の値を利用できる（例えば double 型の変数に a = 3.14; とすることでは十分な精度が得られないことがある）．
いくつかの数値に関して，手計算の結果と一致することを確認せよ．

結果：
Please enter the number--->3
半径3.000000 面積28.274334

Please enter the number--->300
半径300.000000 面積282743.338823

習得した内容・反省・考察など：
任意の半径の大きさを入力させ、その半径の大きさの縁の面積を求めることができた。今回の課題でもreturn以降を改良するだけだったため、特に問題はなかったが、計算を記述するときに凡ミスをしてしまっていたので、もっと確認を増やしていく。

-----------------------------------------------
(T4_6) 

学習内容：
角度について，単位を度からラジアンに変換するプログラムを作成する．

整数 x を引数とし，角度 x（度）を弧度法による角度（ラジアン）に変換した値を戻り値とする関数 double deg_to_rad( int x ) を作成せよ． 計算式によってはキャストが必要になることに注意を要する． 
変換のための式は p. 139に示されているが，本問では円周率として M_PI を用いること．
次に，この関数を複数回呼び出して，0(度), 30(度), 45(度), 75(度), 90(度), 135(度), 180(度)を弧度法による角度（ラジアン）に変換した値を表示するよう main 関数を作成せよ．
ただし，for文やwhile文を使う必要はなく，それぞれの角度に対してその都度関数を次のように呼び出せばよい： 
printf(" 0 度は %f ラジアン", deg_to_rad( 0 ) );

結果：
0 度は 0.000000 ラジアン
30 度は 0.523599 ラジアン
45 度は 0.785398 ラジアン
75 度は 1.308997 ラジアン
90 度は 1.570796 ラジアン
135 度は 2.356194 ラジアン
180 度は 3.141593 ラジアン

習得した内容・反省・考察など：
度数法を弧度法に変更して出力することができた。math.hをインクルードすることでPIなどが使えるようになることはしっかり復習しておきたい。

-----------------------------------------------
(T4_7) 

学習内容：
[リスト 5.3] の関数 powint を用いることで，main 関数において 1以上10以下の数の3乗を表示するプログラムを作成せよ．for 文を用いて引数を変えながら関数を呼び出す方法を理解すること．

結果：
1       1
2       8
3       27
4       64
5       125
6       216
7       343
8       512
9       729
10      1000

習得した内容・反省・考察など：
リスト5_3を改良することで、1から10までの数字の３乗を出力することができた。yにxの惨状の値を代入させることでうまく出力することができた。

-----------------------------------------------
[T4] 全体に対する感想などを以下に記すこと．
所要時間： （0.5）時間
今回の課題では、関数の使い方と定義の仕方について勉強することができた。関数を定義する際にはmain型の外で定義することがポイントであったため、関数を使う際には気を配っていきたい。また、戻り値を工夫することで自分が思った動作をさせることができたため、戻り値にもこだわって作成していきたい。



